#
#	Shop Menus 1.0.0
#	
#	Created for as a commission for PlayInABox.
#	Copyright Â© 2021 Baylor Henshaw <baylor@henshaw.me>
#
#	Written by Baylor Henshaw (https://baezor.com/)
#

#
#	Shop Theme Options
#

# Options
options:
	
	# Style Options - Menu Items
	shop.style.background: black stained glass pane
	shop.style.filler: stone button

	# Back Button
	shop.style.buttons.back: red stained glass pane named "&cGo Back!" with lore "&7Click to go back!"
	shop.style.buttons.back.slot: 40

	# Page Increase Button
	shop.style.buttons.page_increase: arrow named "&6Next Page" with lore "&7Click to go to the next page!"
	shop.style.buttons.page_increase.slot: 41

	# Page Decrease Button
	shop.style.buttons.page_decrease: arrow named "&6Previous Page" with lore "&7Click to go to the previous page!"
	shop.style.buttons.page_decrease.slot: 39

	# Current Amount Button
	shop.style.buttons.current_amount: minecart with furnace named "&6Current Quantity: %{_amount}%"
	shop.style.buttons.current_amount.slot: 4

	# Increase Count Button
	shop.style.buttons.increase_count: orange stained glass pane named "&6+4"
	shop.style.buttons.increase_count.slot: 5

	# Decrease Count Button
	shop.style.buttons.decrease_count: yellow stained glass pane named "&6-4"
	shop.style.buttons.decrease_count.slot: 3

	# Style Options - Colors & Lore
	shop.style.item.format.both: named "&d%{_id}%" with lore "&7", "&aCost: $%{_buy}%" and "&cSell: $%{_sell}%"
	shop.style.item.format.buy: named "&d%{_id}%" with lore "&7" and "&aCost: $%{_buy}%"
	shop.style.item.format.sell: named "&d%{_id}%" with lore "&7" and "&cSell: $%{_sell}%"

	shop.style.category.format: named "&d%{_category}%" with lore "&bClick to Open!"

#
#	Menu API
#

# Open Main Menu
function shop_openMainMenu(player: player):
	
	play sound "ui.button.click" to {_player}
	
	set metadata tag "shop.mainMenu" of {_player} to chest inventory with 5 rows named "Shop"

	loop integers between 0 and 44:
		set slot loop-integer of metadata tag "shop.mainMenu" of {_player} to {@shop.style.background} named "&7"

	loop shop_getCategories():
		set {_category} to loop-value
		set {_icon} to shop_getCategoryIcon(loop-value)
		{_icon} is set
		set {_icon} to shop_applyCommand({_icon}, "open:%loop-value%^1^4")

		set {_slot} to shop_getCategorySlot(loop-value)

		set slot {_slot} of metadata tag "shop.mainMenu" of {_player} to {_icon} {@shop.style.category.format}

		delete {_icon}
		delete {_slot}

	open (metadata tag "shop.mainMenu" of {_player}) to {_player}

# Open Category
function shop_openCategory(player: player, category: string, page: number = 1, amount: number = 4):

	set {_i::*} to shop_getItems({_category})
	set {_ia} to 1
	loop {_i::*}:
		add 1 to {_ia}
	set {_ia} to {_ia}/21
	set {_ia} to ceil({_ia})

	if {_page} < 1:
		set {_page} to 1
	else if {_page} > {_ia}:
		set {_page} to {_ia}

	if {_amount} < 4:
		set {_amount} to 4
	else if {_amount} > 64:
		set {_amount} to 64
	else:

		play sound "ui.button.click" to {_player}
	
	set metadata tag "shop.current" of {_player} to chest inventory with 5 rows named "&r%{_category}%"

	loop integers between 0 and 44:
		set slot loop-integer of metadata tag "shop.current" of {_player} to {@shop.style.background} named "&7"

	loop (integers between 10 and 16, integers between 19 and 25 and integers between 28 and 34):
		set slot loop-integer of metadata tag "shop.current" of {_player} to {@shop.style.filler} named "&7"

	set {_back} to {@shop.style.buttons.back}
	set {_back} to shop_applyCommand({_back}, "open:main")
	set slot {@shop.style.buttons.back.slot} of metadata tag "shop.current" of {_player} to {_back}

	set {_current} to {@shop.style.buttons.current_amount}
	set slot {@shop.style.buttons.current_amount.slot} of metadata tag "shop.current" of {_player} to {_current} with all flags hidden

	set {_increase} to {@shop.style.buttons.increase_count}
	set {_increase} to shop_applyCommand({_increase}, "open:%{_category}%^%{_page}%^%{_amount}+4%")
	set slot {@shop.style.buttons.increase_count.slot} of metadata tag "shop.current" of {_player} to {_increase}

	set {_decrease} to {@shop.style.buttons.decrease_count}
	set {_decrease} to shop_applyCommand({_decrease}, "open:%{_category}%^%{_page}%^%{_amount}-4%")
	set slot {@shop.style.buttons.decrease_count.slot} of metadata tag "shop.current" of {_player} to {_decrease}

	set {_minLoop} to (21*{_page})-21 
	set {_loops} to 0
	set {_slot} to 10

	loop {_i::*}:
		if {_loops} is greater than or equal to {_minLoop}:

			set {_id} to loop-value
			set {_item} to shop_getItem({_category}, loop-value)
			set {_buy} to shop_getBuyPrice({_category}, loop-value)
			set {_sell} to shop_getSellPrice({_category}, loop-value)
			set {_item} to shop_applyCommand({_item}, "id:%{_id}%,category:%{_category}%,amount:%{_amount}%,buy:left,sell:right")

			if {_buy} > 0:
				if {_sell} > 0:
					set {_item} to {_item} {@shop.style.item.format.both}
				else:
					set {_item} to {_item} {@shop.style.item.format.buy}
			else if {_sell} > 0:
				set {_item} to {_item} {@shop.style.item.format.sell}
			else:
				set {_item} to red dye named "&cnull"

			set slot {_slot} of metadata tag "shop.current" of {_player} to {_amount} of {_item}

			add 1 to {_slot}
			if {_slot} is 17 or 26:
				add 2 to {_slot}
			if {_slot} is 35:
				exit loop
		add 1 to {_loops}

	if {_ia} > 1:

		set {_pageIncrease} to {@shop.style.buttons.page_increase}
		set {_pageIncrease} to shop_applyCommand({_pageIncrease}, "open:%{_category}%^%{_page}+1%^%{_amount}%")
		set slot {@shop.style.buttons.page_increase.slot} of metadata tag "shop.current" of {_player} to {_pageIncrease}

		set {_pageDecrease} to {@shop.style.buttons.page_decrease}
		set {_pageDecrease} to shop_applyCommand({_pageDecrease}, "open:%{_category}%^%{_page}-1%^%{_amount}%")
		set slot {@shop.style.buttons.page_decrease.slot} of metadata tag "shop.current" of {_player} to {_pageDecrease}



	open (metadata tag "shop.current" of {_player}) to {_player}

# Inventory Click Event
on inventory click:
	if event-inventory = (metadata tag "shop.mainMenu" of player):
		cancel event
		set {_tag} to shop_getCustomItemData(event-item)
		{_tag} is set
		shop_executeTag(player, {_tag}, "%click type%")
	else if event-inventory = (metadata tag "shop.current" of player):
		cancel event
		set {_tag} to shop_getCustomItemData(event-item)
		{_tag} is set
		shop_executeTag(player, {_tag}, "%click type%")

# Parse Input Actions from Tag
function shop_executeTag(player: player, tag: string, click: string):
	message "&3DEBUG: &7&oExecuting &b%{_tag}%" to {_player}
	if {_tag} contains ",":
		set {_s::*} to {_tag} split at ","
		set {_cmds::*} to {_s::*}
	else:
		add {_tag} to {_cmds::*}

	loop {_cmds::*}:
		set {_tagSplit::*} to loop-value split at ":"
		if {_tagSplit::1} is "open":
			if {_tagSplit::2} contains "^":
				set {_ns::*} to {_tagSplit::2} split at "^"
				set {_category} to {_ns::1}
				set {_page} to {_ns::2} parsed as a number
				set {_amount} to {_ns::3} parsed as a number
				shop_openCategory({_player}, {_category}, {_page}, {_amount})
			else if {_tagSplit::2} is "main":
				shop_openMainMenu({_player})

		else if {_tagSplit::1} is "id":
			set {_id} to {_tagSplit::2}

		else if {_tagSplit::1} is "category":
			set {_category} to {_tagSplit::2}

		else if {_tagSplit::1} is "amount":
			set {_amount} to {_tagSplit::2} parsed as a number

		else if {_tagSplit::1} is "close":
			close {_player}'s inventory

		else if {_tagSplit::1} is "buy":
			{_click} in lowercase contains {_tagSplit::2}
			set {_buy} to shop_getBuyPrice({_category}, {_id})
			{_buy} is set
			play sound "ui.button.click" to {_player}

		else if {_tagSplit::1} is "sell":
			{_click} in lowercase contains {_tagSplit::2}
			set {_sell} to shop_getSellPrice({_category}, {_id})
			{_sell} is set
			play sound "ui.button.click" to {_player}

#
#	Misc Functions
#

# Get NBT Data
function shop_getCustomItemData(item: item) :: string:
	set {_tag} to tag "MenuData" of {_item}'s nbt
	return {_tag}

# Apply Command
function shop_applyCommand(item: item, command: string) :: item:
	set {_item} to {_item} with nbt "{MenuData:""%{_command}%""}" with all flags hidden
	return {_item}